import groovy.json.JsonSlurper

import java.util.regex.Matcher
import java.util.regex.Pattern

pluginManagement {
    repositories {
        mavenLocal()

        maven {
            name("NyanMaven Mirror")
            url("https://maven.hendrixshen.top/mirror")
        }

        maven {
            name("Architectury")
            url("https://maven.architectury.dev")
        }

        maven {
            name("MinecraftForge")
            url("https://files.minecraftforge.net/maven")
        }

        maven {
            name("NeoForge")
            url("https://maven.neoforged.net/releases")
        }

        maven {
            name("Jitpack")
            url("https://jitpack.io")
        }

        mavenCentral()
        gradlePluginPortal()
    }

    resolutionStrategy {
        eachPlugin {
            switch (requested.id.id) {
                case "com.replaymod.preprocess": {
                    useModule("com.github.Fallen-Breath:preprocessor:${requested.version}")
                    break
                }
            }
        }
    }
}

ext {
    File localPropsFile = file("${rootDir}/local.properties")

    if (localPropsFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(localPropsFile))
        p.each { key, value ->
            ext[key as String] = value
        }
    }

    getOrDefault = { String key, String defaultValue ->
        if (!ext.has(key)) {
            return defaultValue
        }

        String value = ext.getProperty(key)
        return value.isEmpty() ? defaultValue : value
    }
}

rootProject.setName(settings.providers.gradleProperty("mod.id").get())

// Magic Core API
["common", "fabric", "forge", "neoforge"].forEach {
    include("magiclib-core:${it}")
}

// Magic Game API
Map<String, Map<String, ?>> settings = file("settings.json").withReader {
    new JsonSlurper().parse(it) as Map<String, Map<String, ?>>
}

Map<String, Set<String>> wrappers = new HashMap<>()

for (String module_name : settings.get("projects").keySet()) {
    Map<String, ?> project_detail = settings.get("projects").get(module_name) as Map<String, ?>
    String prefix = project_detail.get("prefix")
    List<String> versions = project_detail.get("versions") as List<String>
    String root_node_name = versions.get(0)

    for (String ver : versions) {
        Matcher matcher = Pattern.compile("^((?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:_\\w+)*)-(fabric|forge|neoforge|quilt)?\$").matcher(ver)

        if (!matcher.matches()) {
            throw new IllegalArgumentException("Invalid submodule name: ${ver}")
        }

        String project_name = "${module_name}:${prefix}-${ver}"
        include("${project_name}")
        ProjectDescriptor proj = project(":${project_name}")
        proj.setProjectDir(file("${module_name}/versions/${ver}"))
        proj.setBuildFileName("../${root_node_name}/build.gradle")
        wrappers.computeIfAbsent(matcher.group(2), key -> new HashSet<>()).add(matcher.group(1))
    }
}

for (String platform : wrappers.keySet()) {
    for (String ver : wrappers.get(platform)) {
        include("magiclib-wrapper:${platform}:${ver}")
    }
}
