plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("signing")

    id("top.hendrixshen.replace-token").version("${replace_token_version}")
}

apply(plugin: "dev.architectury.loom")
apply(plugin: "com.replaymod.preprocess")
apply(plugin: "me.fallenbreath.yamlang")

String modPlatform = loom.platform.get().toString().toLowerCase()
boolean fabricLike = modPlatform == "fabric" || modPlatform == "quilt"
boolean forgeLike = modPlatform == "forge" || modPlatform == "neoforge"
String projectName = project.name.replace("legacy-", "")
Project betterDev = evaluationDependsOn(":magiclib-better-dev:better-dev-${projectName}")
Project malilib = evaluationDependsOn(":magiclib-malilib-extra:malilib-${projectName}")
Project mcAPI = evaluationDependsOn(":magiclib-minecraft-api:mc-api-${projectName}")
int mcVersion = 0

preprocess {
    mcVersion = vars.get().get("MC")
    vars.put("MC", mcVersion)
    vars.put("FABRIC", modPlatform == "fabric" ? 1 : 0)
    vars.put("FORGE", modPlatform == "forge" ? 1 : 0)
    vars.put("NEO_FORGE", modPlatform == "neoforge" ? 1 : 0)
    vars.put("FABRIC_LIKE", fabricLike ? 1 : 0)
    vars.put("FORGE_LIKE", forgeLike ? 1 : 0)
}

loom {
    silentMojangMappingsLicense()
}

repositories {
    mavenLocal()

    maven {
        name("NyanMaven Mirror")
        url("https://maven.hendrixshen.top/mirror")
    }

    maven {
        name("Curse Maven")
        url("https://www.cursemaven.com")

        content {
            includeGroup("curse.maven")
        }
    }

    maven {
        name("Modrinth Maven")
        url("https://api.modrinth.com/maven")

        content {
            includeGroup("maven.modrinth")
        }
    }

    mavenCentral()
}

// Module, Property prefix, Resolve condition, Transitive dependencies.
def apiDependencies = [
        ["carpet:fabric-carpet", "carpet", true, false],
]

// Module, Property prefix, Resolve condition, Transitive dependencies.
def runtimeDependencies = [
        ["", "", false, false],
]

dependencies {
    minecraft("com.mojang:minecraft:${project.property("dependencies.minecraft_version")}")
    mappings(loom.officialMojangMappings())

    // Lombok
    compileOnly("org.projectlombok:lombok:${project.property("dependencies.lombok_version")}")
    annotationProcessor("org.projectlombok:lombok:${project.property("dependencies.lombok_version")}")

    // MagicLib Core
    api(annotationProcessor(project(path: ":magiclib-core:${modPlatform}", configuration: "shadow")))

    api(project(path: betterDev.path, configuration: "namedElements"))
    api(project(path: malilib.path, configuration: "namedElements"))
    api(project(path: mcAPI.path, configuration: "namedElements"))

    if (forgeLike) {
        compileOnly(project(path: betterDev.path, configuration: "modCompileClasspathMainMapped"))
        localRuntime(project(path: betterDev.path, configuration: "modRuntimeClasspathMainMapped"))
    }

    switch (modPlatform) {
        case "fabric":
            modApi("net.fabricmc:fabric-loader:${project.property("dependencies.fabric_loader_version")}")
            break
        case "forge":
            forge("net.minecraftforge:forge:${project.property("dependencies.minecraft_version")}-${project.property("dependencies.forge_version")}")
            break
        case "neoforge":
            neoForge("net.neoforged:neoforge:${project.property("dependencies.neoforge_version")}")
            break
    }

    // API
    apiDependencies.forEach { item ->
        String dependencyNotation = item[0]
        String dependencyVersion = project.findProperty("dependencies.api.${item[1]}_version")
        boolean shouldResolve = item[2] && dependencyVersion != "0"
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            if (!dependencyVersion) {
                throw new RuntimeException("Could not get unknown property 'dependencies.api.${item[1]}_version' for dependency ${item[0]} in project ${project.name}")
            }

            modApi("${dependencyNotation}:${dependencyVersion}") {
                transitive(shouldTransitive)
            }
        }
    }

    // Runtime Library - Make development environment comfortable.
    runtimeDependencies.forEach { item ->
        String dependencyNotation = item[0]
        String dependencyVersion = project.findProperty("dependencies.runtime.${item[1]}_version")
        boolean shouldResolve = item[2] && dependencyVersion != "0"
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            if (!dependencyVersion) {
                throw new RuntimeException("Could not get unknown property 'dependencies.api.${item[1]}_version' for dependency ${item[0]} in project ${project.name}")
            }

            modRuntimeOnly("${dependencyNotation}:${dependencyVersion}") {
                transitive(shouldTransitive)
            }
        }
    }
}

loom {
    accessWidenerPath.set(file("src/main/resources/${project.parent.property("mod.id")}.accesswidener"))
    enableTransitiveAccessWideners.set(false)

    interfaceInjection {
        enableDependencyInterfaceInjection.set(false)
    }

    if (modPlatform == "forge") {
        forge {
            convertAccessWideners.set(true)
            mixinConfig("${project.parent.property("mod.id")}.mixins.json")
        }
    }

    runConfigs.configureEach {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    runConfigs.named("client") {
        programArgs([
                "--width",
                project.getOrDefault("ow.game.window.width", "1920"),
                "--height",
                project.getOrDefault("ow.game.window.height", "1080"),
                "--username",
                project.getOrDefault("ow.game.window.username", "dev")
        ])
        vmArgs("-Dmagiclib.debug=true")
        vmArgs("-Dmagiclib.dev.qol=true")
        vmArgs("-Dmagiclib.dev.qol.dfu.destroy=true")
        runDir("run/client")
    }

    runConfigs.named("server") {
        vmArgs("-Dmagiclib.debug=true")
        vmArgs("-Dmagiclib.dev.qol=true")
        vmArgs("-Dmagiclib.dev.qol.dfu.destroy=true")
        runDir("run/server")
    }

    if (fabricLike) {
        runs {
            mixinAuditClient {
                inherit(client)
                vmArgs("-Dmagiclib.debug.mixinAuditor.enable=true")
                ideConfigGenerated(false)
                runDir("run/client")
            }

            mixinAuditServer {
                inherit(server)
                vmArgs("-Dmagiclib.debug.mixinAuditor.enable=true")
                ideConfigGenerated(false)
                runDir("run/server")
            }
        }
    }

    // Setup client default settings.
    runClient {
        defaultCharacterEncoding("UTF-8")

        doFirst {
            file("${projectDir}/run/client/config").mkdirs()
            file("${projectDir}/run/client/options.txt").with { File f ->
                {
                    if (!f.exists()) {
                        f.parentFile.mkdirs()
                        f.withWriter { BufferedWriter writer ->
                            writer.writeLine("autoJump:false")
                            writer.writeLine("enableVsync:false")
                            writer.writeLine("forceUnicodeFont:true")
                            writer.writeLine("fov:1.0")
                            writer.writeLine("gamma:16.0")
                            writer.writeLine("guiScale:3")
                            writer.writeLine("lang:${Locale.getDefault().toString().toLowerCase()}")
                            writer.writeLine("maxFps:260")
                            writer.writeLine("renderDistance:10")
                            writer.writeLine("soundCategory_master:0.0")
                        }
                    }
                }
            }
        }
    }

    // Setup server default settings.
    runServer {
        defaultCharacterEncoding("UTF-8")

        doFirst {
            // Agree eula before server init.
            file("${projectDir}/run/server/eula.txt").with { File f ->
                {
                    if (!f.exists()) {
                        f.parentFile.mkdirs()
                        f.withWriter { BufferedWriter writer ->
                            writer.writeLine("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).")
                            writer.writeLine("#${new Date()}")
                            writer.writeLine("eula=true")
                        }
                    }
                }
            }
        }
    }
}

base {
    setArchivesName("${project.parent.property("mod.archives_base_name")}-mc${project.property("dependencies.minecraft_version")}-${modPlatform}")
    group("${project.property("mod.maven_group")}")
    version(project.getModVersion(project.parent))
}

java {
    if (mcVersion > 11701) {
        sourceCompatibility(JavaVersion.VERSION_17)
        targetCompatibility(JavaVersion.VERSION_17)
    } else if (mcVersion > 11605) {
        sourceCompatibility(JavaVersion.VERSION_16)
        targetCompatibility(JavaVersion.VERSION_16)
    } else {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
    }

    withSourcesJar()
    withJavadocJar()
}

remapJar {
    if (forgeLike) {
        if (modPlatform == "neoforge") {
            atAccessWideners.add("${project.parent.property("mod.id")}.accesswidener")
        }

        exclude("${project.parent.property("mod.id")}.accesswidener")
    }

    setRemapperIsolation(true)
}

replaceToken {
    targetSourceSets.set([sourceSets.main])
    replace("@MINECRAFT_VERSION@"         , project.property("dependencies.minecraft_version"))
    replace("@MINECRAFT_VERSION_IDENTIFY@", project.property("dependencies.minecraft_version").toString().replace(".", "_"))
    replace("@MOD_VERSION@"               , project.getVersionWithCommitHash(this.project.parent) as String)
    replaceIn("top/hendrixshen/magiclib/MagicLibReference")
}

processResources {
    [
            "fabric.mod.json"            : ["fabric"],
            "META-INF"                   : ["forge", "neoforge"],
            "META-INF/mods.toml"         : ["forge", "neoforge"],
            "META-INF/neoforge.mods.toml": ["neoforge"]
    ].forEach { file, platforms ->
        if (platforms.contains(modPlatform)) {
            filesMatching(file) {
                expand([
                        "minecraft_dependency": project.property("dependencies.minecraft_dependency"),
                        "minecraft_version"   : project.property("dependencies.minecraft_version"),
                        "minecraft_version_id": project.property("dependencies.minecraft_version").toString().replace(".", "_"),
                        "mod_alias"           : project.parent.property("mod.id"),
                        "mod_description"     : project.parent.property("mod.description"),
                        "mod_homepage"        : project.parent.property("mod.homepage"),
                        "mod_id"              : project.parent.property("mod.id").toString().replace("-", "_"),
                        "mod_license"         : project.parent.property("mod.license"),
                        "mod_name"            : project.parent.property("mod.name"),
                        "mod_sources"         : project.parent.property("mod.sources"),
                        "mod_version"         : project.getVersionWithCommitHash(this.project.parent),
                        "root_mod_id"         : rootProject.property("mod.id"),
                        "root_mod_name"       : rootProject.property("mod.name"),
                        "root_mod_description": rootProject.property("mod.description"),
                ])
            }
        } else {
            exclude(file)
        }
    }

    from("${rootDir}/LICENSE")
    from("${rootDir}/icon.png") {
        if (fabricLike) {
            into("assets/${project.parent.property("mod.id")}")
        }
    }
}

yamlang {
    targetSourceSets.set([sourceSets.main])
    inputDir.set("assets/${project.parent.property("mod.id")}/lang")
}

signing {
    String signingKey = project.getOrDefault("secrets.gpg.signingKey", project.getEnv().SIGNING_PGP_KEY)
    String signingPassword = project.getOrDefault("secrets.gpg.signingPassword", project.getEnv().SIGNING_PGP_PASSWORD)

    required {
        signingKey
    }

    useInMemoryPgpKeys(signingKey, signingPassword ? signingPassword : "")
    sign(publishing.publications)
}

publishing {
    publications { PublicationContainer publications ->
        register("release", MavenPublication) { MavenPublication publication ->
            artifactId("${this.project.parent.property("mod.artifact_name")}-${projectName}")
            from(this.project.components.java)
            version("${this.project.getMavenArtifactVersion(this.project.parent)}")
            this.project.addPomMetadataInformation(this.project.parent, publication)
        }
    }

    repositories { RepositoryHandler repositoryHandler ->
        mavenLocal {
            name("mavenLocal")
        }

        maven {
            name("projectLocalRelease")
            url("${rootDir}/publish/release")
        }

        maven {
            name("nyanMavenRelease")
            url("https://maven.hendrixshen.top/releases")

            project.credentialsNyanMaven(it)
        }
    }
}

// Solutions from: https://youtrack.jetbrains.com/issue/KT-46466
TaskCollection<Sign> signingTasks = tasks.withType(Sign)
tasks.withType(AbstractPublishToMaven).configureEach {
    dependsOn(signingTasks)
}

tasks.withType(PublishToMavenRepository).configureEach {
    Provider<Boolean> predicate = provider {
        repository == publishing.repositories.mavenLocal ||
                (repository == publishing.repositories.projectLocalRelease && publication == publishing.publications.release) ||
                (repository == publishing.repositories.nyanMavenRelease && publication == publishing.publications.release && project.isNyanMavenCredentialsExist())
    }

    onlyIf {
        predicate.get()
    }
}

tasks.withType(Javadoc).configureEach { Javadoc task ->
    include("**/api/**")
    task.options.encoding("UTF-8")
    (task.options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
}

tasks.withType(JavaCompile).configureEach { JavaCompile task ->
    task.options.encoding("UTF-8")

    if (mcVersion > 11701) {
        task.options.release.set(17)
    } else if (mcVersion > 11605) {
        task.options.release.set(16)
    } else {
        task.options.release.set(8)
    }
}

tasks.register("cleanRuns", DefaultTask.class) {
    doLast {
        file(loom.runConfigs.client.runDir).parentFile.deleteDir()
    }
}

tasks.register("cleanRunClient", DefaultTask.class) {
    doLast {
        file(loom.runConfigs.client.runDir).deleteDir()
    }
}

tasks.register("cleanRunServer", DefaultTask.class) {
    doLast {
        file(loom.runConfigs.server.runDir).deleteDir()
    }
}

[
        "cleanRuns", "cleanRunClient", "cleanRunServer",
        "runClient", "runServer",
        "runMixinAuditClient", "runMixinAuditServer",
        "preprocessCode", "preprocessResources",
        "preprocessTestCode", "preprocessTestResources"
].forEach { taskName ->
    if (tasks.getNames().contains(taskName)) {
        tasks.named(taskName) {
            it.group("${project.property("mod.id")}")
        }
    }
}
